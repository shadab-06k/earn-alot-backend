#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; LotteryDraw_LotteryDraw.headers.fc
;;
;; Header files for LotteryDraw
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_prepare_random
() __tact_prepare_random() impure inline;

;; __tact_dict_get_int_int
int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline;

;; __tact_dict_set_int_int
(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v, builder b) inline;

;; $Ticket_Owner$_store
builder $Ticket_Owner$_store(builder build_0, (slice, int, int) v) inline;

;; $Ticket_Owner$_store_cell
cell $Ticket_Owner$_store_cell((slice, int, int) v, builder b) inline;

;; $Ticket_Owner$_load
(slice, ((slice, int, int))) $Ticket_Owner$_load(slice sc_0) inline;

;; $Ticket_Owner$_as_optional
tuple $Ticket_Owner$_as_optional((slice, int, int) v) inline;

;; $Ticket_Owner$_load_opt
tuple $Ticket_Owner$_load_opt(cell cl) inline;

;; $LotteryDraw$_store
builder $LotteryDraw$_store(builder build_0, (slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline;

;; $LotteryDraw$_load
(slice, ((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int))) $LotteryDraw$_load(slice sc_0) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $Ticket_Owner$_get_reward
_ $Ticket_Owner$_get_reward((slice, int, int) v) inline;

;; $Ticket_Owner$_get_hasClaimed
_ $Ticket_Owner$_get_hasClaimed((slice, int, int) v) inline;

;; $Ticket_Owner$_not_null
((slice, int, int)) $Ticket_Owner$_not_null(tuple v) inline;

;; $Ticket_Owner$_to_tuple
tuple $Ticket_Owner$_to_tuple(((slice, int, int)) v) inline;

;; $Ticket_Owner$_to_opt_tuple
tuple $Ticket_Owner$_to_opt_tuple(tuple v) inline;

;; $Ticket_Owner$_to_opt_external
tuple $Ticket_Owner$_to_opt_external(tuple v) inline;

;; $LotteryDraw$init$_load
(slice, ((int, int, int, int, int, int, int, int))) $LotteryDraw$init$_load(slice sc_0) inline;

;; $LotteryDraw$_contract_init
(slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $LotteryDraw$_contract_init(int $_adminPct, int $_floorPct, int $_bonusPct, int $_decayNum, int $_decayDenom, int $_Bid, int $_HowLong, int $_MaxTicket) impure inline;

;; $LotteryDraw$_contract_load
(slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $LotteryDraw$_contract_load() impure inline;

;; $LotteryDraw$_contract_store
() $LotteryDraw$_contract_store((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) v) impure inline;

;; $global_random
int $global_random(int $min, int $max) impure inline;

;; $global_pow
int $global_pow(int $base, int $exp) impure inline;

;; $Cell$_fun_asSlice
slice $Cell$_fun_asSlice(cell $self) impure inline;

;; $SendParameters$_constructor_to_value_body
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_body(slice $to, int $value, cell $body) inline;

;; $LotteryDraw$_fun_random_uint
((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $LotteryDraw$_fun_random_uint((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, int $max, int $salt) impure inline_ref;

;; $LotteryDraw$_fun_get_decay_weight
((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $LotteryDraw$_fun_get_decay_weight((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, int $index) impure inline_ref;

;; $LotteryDraw$_fun_get_participant_count
((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $LotteryDraw$_fun_get_participant_count((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $LotteryDraw$_fun_get_total_Pool
((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $LotteryDraw$_fun_get_total_Pool((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $LotteryDraw$_fun_get_Ticket_Data
((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), tuple) $LotteryDraw$_fun_get_Ticket_Data((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, int $tk) impure inline_ref;

;; $LotteryDraw$_fun_get_Ticket_TotalData
((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), cell) $LotteryDraw$_fun_get_Ticket_TotalData((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $LotteryDraw$_fun_get_Ticket_map
((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), cell) $LotteryDraw$_fun_get_Ticket_map((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $LotteryDraw$_fun_get_BonusCount
((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $LotteryDraw$_fun_get_BonusCount((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $LotteryDraw$_fun_get_prize
((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $LotteryDraw$_fun_get_prize((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, int $index) impure inline_ref;

;; $LotteryDraw$_fun_get_MinPrize
((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $LotteryDraw$_fun_get_MinPrize((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $LotteryDraw$_fun_get_Bid
((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), slice) $LotteryDraw$_fun_get_Bid((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref;

;; $MessageParameters$_constructor_bounce_to_value_mode_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline;

;; $LotteryDraw$_fun_notify
((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), ()) $LotteryDraw$_fun_notify((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, cell $body) impure inline;

;; $Ticket_Owner$_constructor_participent_reward_hasClaimed
((slice, int, int)) $Ticket_Owner$_constructor_participent_reward_hasClaimed(slice $participent, int $reward, int $hasClaimed) inline;

;; $SendParameters$_constructor_to_value_mode
((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int $queryId) inline;


;; LotteryDraw_LotteryDraw.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

int __tact_sha256(slice data) asm """

            <{
                <{ DUP SREFS }> PUSHCONT
                <{ LDREFRTOS }> PUSHCONT
                WHILE
                DEPTH
                HASHEXT_SHA256
            }> PUSHCONT
            1 1 CALLXARGS

""";

(slice, slice) __tact_load_address_opt(slice cs) asm """

            b{00} SDBEGINSQ
            IF:<{
              PUSHNULL
            }>ELSE<{
              LDMSGADDR
              SWAP
            }>

""";

builder __tact_store_addr_none(builder b) asm "b{00} STSLICECONST";

builder __tact_store_address_opt(builder b, slice address) inline {
    if (null?(address)) {
        return __tact_store_addr_none(b);
    } else {
        return b.store_slice(address);
    }
}

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

() __tact_prepare_random() impure inline {
    if (null?(__tact_randomized)) {
        randomize_lt();
        __tact_randomized = true;
    }
}

forall X0, X1, X2 -> tuple __tact_tuple_create_3((X0, X1, X2) v) asm """
    3 TUPLE
""";

forall X0, X1, X2 -> (X0, X1, X2) __tact_tuple_destroy_3(tuple v) asm """
    3 UNTUPLE
""";

int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline {
    var (r, ok) = idict_get?(d, kl, k);
    if (ok) {
        return r~load_int(vl);
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_int_int(cell d, int kl, int k, int v, int vl) inline {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_builder(d, kl, k, begin_cell().store_int(v, vl)), ());
    }
}

cell __tact_dict_get_int_cell(cell d, int kl, int k) inline {
    var (r, ok) = idict_get_ref?(d, kl, k);
    if (ok) {
        return r;
    } else {
        return null();
    }
}

(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline {
    if (null?(v)) {
        var (r, ok) = idict_delete?(d, kl, k);
        return (r, ());
    } else {
        return (idict_set_ref(d, kl, k, v), ());
    }
}

int $global_now() impure asm """
    NOW
""";

builder $global_beginCell() impure asm """
    NEWC
""";

int $global_nativeRandomInterval(int $max) impure asm """
    RAND
""";

int $global_random(int $min, int $max) impure inline {
    __tact_prepare_random();
    return ($min + $global_nativeRandomInterval(($max - $min)));
}

int $global_pow(int $base, int $exp) impure inline {
    throw_unless(5, ($exp >= 0));
    int $result = 1;
    repeat ($exp) {
        $result = $result * $base;
    }
    return $result;
}

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_message((int, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
    STZEROES
    // → Stack state
    // s0: Builder
    // s1: `body`
    // s2: `mode`
    STDICT
    ENDC
    SWAP
    SENDRAWMSG
""";

() $global_send((int, cell, cell, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    105 PUSHINT         // 1 + 4 + 4 + 64 + 32
    STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
    // → Stack state
    // s0: Builder
    // s1: `data`
    // s2: `code`
    // s3: `body`
    // s4: `mode`

    // Group 2: Placing the Builder after code and data, then checking those for nullability
    s2 XCHG0
    DUP2
    ISNULL
    SWAP
    ISNULL
    AND
    // → Stack state
    // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
    // s1: `code`
    // s2: `data`
    // s3: Builder
    // s4: `body`
    // s5: `mode`

    // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
    <{
        DROP2 // drop `data` and `code`, since either of those is null
        b{0} STSLICECONST
    }> PUSHCONT

    // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
    <{
        // _ split_depth:(Maybe (## 5))
        //   special:(Maybe TickTock)
        //   code:(Maybe ^Cell)
        //   data:(Maybe ^Cell)
        //   library:(Maybe ^Cell)
        // = StateInit;
        ROT                // place message Builder on top
        b{10} STSLICECONST // store Maybe = true, Either = false
        // Start composing inlined StateInit
        b{00} STSLICECONST // store split_depth and special first
        STDICT             // store code
        STDICT             // store data
        b{0} STSLICECONST  // store library
    }> PUSHCONT

    // Group 3: IFELSE that does the branching shown above
    IFELSE
    // → Stack state
    // s0: Builder
    // s1: null or StateInit
    // s2: `body`
    // s3: `mode`

    // Group 4: Finalizing the message
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC
    // → Stack state
    // s0: Cell
    // s1: `mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
""";

slice $Int$_fun_toFloatString(int $self, int $digits) impure asm """
    DUP // x digits digits
    1 LESSINT // x digits digits<=0
    134 THROWIF // x digits
    DUP // x digits digits
    77 GTINT // x digits digits>77
    134 THROWIF // x digits

    NEWC // x digits b
    ROTREV // b x digits
    s1 PUSH // b x digits x
    0 LESSINT // b x digits x<0?

    <{
        // b x digits
        ROT // x digits b
        x{2d} STSLICECONST // x digits b
        ROT // digits b x
        NEGATE // digits b -x
        ROT // b -x digits
    }>CONT IF

    // b x digits
    ONE // b x digits 1
    OVER // b x digits 1 digits

    <{ 10 MULCONST }>CONT REPEAT // b x digits 10^digits

    s1 s2 XCHG // b digits x 10^digits
    DIVMOD // b digits left right
    s3 s3 XCHG2 // right digits b left

    <{
        // b x

        <{
            // b x
            10 PUSHINT DIVMOD // b x/10 x%10
            48 ADDCONST // b x/10 (x%10+48)
            s2 s2 s0 XC2PU ISZERO // (x%10+48) b x/10 x/10==0?
        }>CONT UNTIL
        // ... b x

        DROP // ... b
        DEPTH DEC // ... b n
        <{ 8 STU }>CONT REPEAT // b
    }>CONT 2 1 CALLXARGS

    // right digits "left"

    ROT // digits "left" right
    DUP // digits "left" right right
    ISZERO // digits "left" right right==0?

    <{
        // digits "left" right
        DROP // digits "left"
        NIP // "left"
    }>CONT

    <{
        // digits "left" right
        ZERO // digits "left" right 0
        SWAP // digits "left" 0 right

        <{
            // digits "left" i right
            DUP // digits "left" i right right
            10 PUSHINT // digits "left" i right right 10
            MOD // digits "left" i right right%10
            ISZERO // digits "left" i right right%10==0?
        }>CONT

        <{
            // digits "left" i right
            10 PUSHINT // digits "left" i right 10
            DIV // digits "left" i right/10
            SWAP // digits "left" right/10 i
            INC // digits "left" right/10 i+1
            SWAP // digits "left" i+1 right/10
        }>CONT

        WHILE // digits "left" i right

        <{
            // x
            NEWC // x b
            SWAP // b x

            <{
                // b x
                10 PUSHINT DIVMOD // b x/10 x%10
                48 ADDCONST // b x/10 (x%10+48)
                s2 s2 s0 XC2PU ISZERO // (x%10+48) b x/10 x/10==0?
            }>CONT UNTIL
            // ... b x

            DROP // ... b
            DEPTH DEC DUP // ... b n n
            ROTREV // ... n b n
            <{
                // ... c n b
                s1 s2 XCHG // ... n c b
                8 STU // ... n b
            }>CONT REPEAT // n b
        }>CONT 1 2 CALLXARGS
        // digits "left" i right_digits "right"
        ROTREV // digits "left" "right" i right_digits
        ADD // digits "left" "right" right_digits

        s3 s1 XCHG // "right" "left" digits right_digits
        SUB // "right" "left" digits_diff
        SWAP // "right" digits_diff "left"
        x{2e} STSLICECONST // "right" digits_diff "left."
        SWAP // "right" "left." digits_diff

        <{
            // "right" "left."
            x{30} STSLICECONST // "right" "left.0"
        }>CONT REPEAT // "right" "left.000"

        STB // "left.000right"
    }>CONT

    IFELSE // b

    ENDC CTOS // s
""";

cell $Builder$_fun_endCell(builder $self) impure asm """
    ENDC
""";

slice $Cell$_fun_beginParse(cell $self) impure asm """
    CTOS
""";

slice $Cell$_fun_asSlice(cell $self) impure inline {
    var ($self) = $self;
    return $Cell$_fun_beginParse($self);
}

((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), ()) $LotteryDraw$_fun_notify((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, cell $body) impure inline {
    var (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)) = $self;
    slice $to = __tact_context_get_sender();
    int $bounce = false;
    if (false) {
        int $balance = $global_myBalance();
        int $balanceBeforeMessage = ($balance - $Context$_get_value(__tact_context_get()));
        if (($balanceBeforeMessage < 0)) {
            $global_nativeReserve(0, 0);
            $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 130, $body));
            return (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket), ());
        }
    }
    $global_message($MessageParameters$_constructor_bounce_to_value_mode_body($bounce, $to, 0, 66, $body));
    return (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket), ());
}

;; LotteryDraw_LotteryDraw.constants.fc
;; Cell AubBLcmVjtnk5kiQ2Ya3JSyY9hCcSopeltaFiC7rRbE=
cell __gen_cell_cell_02e6c12dc9958ed9e4e64890d986b7252c98f6109c4a8a5e96d685882eeb45b1() asm """
    B{b5ee9c724101010100120000200000000048656c6c6f2c20576f726c646db25624} B>boc PUSHREF
""";

;; LotteryDraw_LotteryDraw.storage.fc
;;
;; Type: Context
;; TLB: _ bounceable:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounceable, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell value:int257 to:address bounce:bool = SendParameters
;;

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_body(slice $to, int $value, cell $body) inline {
    return (0, $body, null(), null(), $value, $to, true);
}

((int, cell, cell, cell, int, slice, int)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline {
    return ($mode, null(), null(), null(), $value, $to, true);
}

;;
;; Type: MessageParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 to:address bounce:bool = MessageParameters
;;

((int, cell, int, slice, int)) $MessageParameters$_constructor_bounce_to_value_mode_body(int $bounce, slice $to, int $value, int $mode, cell $body) inline {
    return ($mode, $body, $value, $to, $bounce);
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v, builder b) inline {
    return $DeployOk$_store(b, v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: Ticket_Owner
;; TLB: _ participent:address reward:int257 hasClaimed:bool = Ticket_Owner
;;

builder $Ticket_Owner$_store(builder build_0, (slice, int, int) v) inline {
    var (v'participent, v'reward, v'hasClaimed) = v;
    build_0 = build_0.store_slice(v'participent);
    build_0 = build_0.store_int(v'reward, 257);
    build_0 = build_0.store_int(v'hasClaimed, 1);
    return build_0;
}

cell $Ticket_Owner$_store_cell((slice, int, int) v, builder b) inline {
    return $Ticket_Owner$_store(b, v).end_cell();
}

(slice, ((slice, int, int))) $Ticket_Owner$_load(slice sc_0) inline {
    var v'participent = sc_0~load_msg_addr();
    var v'reward = sc_0~load_int(257);
    var v'hasClaimed = sc_0~load_int(1);
    return (sc_0, (v'participent, v'reward, v'hasClaimed));
}

tuple $Ticket_Owner$_as_optional((slice, int, int) v) inline {
    var (v'participent, v'reward, v'hasClaimed) = v;
    return __tact_tuple_create_3(v'participent, v'reward, v'hasClaimed);
}

tuple $Ticket_Owner$_load_opt(cell cl) inline {
    if (null?(cl)) {
        return null();
    }
    var sc = cl.begin_parse();
    return $Ticket_Owner$_as_optional(sc~$Ticket_Owner$_load());
}

_ $Ticket_Owner$_get_reward((slice, int, int) v) inline {
    var (v'participent, v'reward, v'hasClaimed) = v;
    return v'reward;
}

_ $Ticket_Owner$_get_hasClaimed((slice, int, int) v) inline {
    var (v'participent, v'reward, v'hasClaimed) = v;
    return v'hasClaimed;
}

((slice, int, int)) $Ticket_Owner$_not_null(tuple v) inline {
    var (slice vvv'participent, int vvv'reward, int vvv'hasClaimed) = __tact_tuple_destroy_3(v);
    return (vvv'participent, vvv'reward, vvv'hasClaimed);
}

tuple $Ticket_Owner$_to_tuple(((slice, int, int)) v) inline {
    var (v'participent, v'reward, v'hasClaimed) = v;
    return __tact_tuple_create_3(v'participent, v'reward, v'hasClaimed);
}

tuple $Ticket_Owner$_to_opt_tuple(tuple v) inline {
    if (null?(v)) { return null(); } 
    return $Ticket_Owner$_to_tuple($Ticket_Owner$_not_null(v)); 
}

tuple $Ticket_Owner$_to_opt_external(tuple v) inline {
    var loaded = $Ticket_Owner$_to_opt_tuple(v);
    if (null?(loaded)) {
        return null();
    } else {
        return (loaded);
    }
}

((slice, int, int)) $Ticket_Owner$_constructor_participent_reward_hasClaimed(slice $participent, int $reward, int $hasClaimed) inline {
    return ($participent, $reward, $hasClaimed);
}

;;
;; Type: LotteryDraw
;; TLB: _ owner:address bid:int257 adminPercentage:int257 floorPercentage:int257 bonusPercentage:int257 decayFactorNumerator:int257 decayFactorDenominator:int257 fixedPointScale:int257 admin:address tickets:dict<int, int> participents:dict<int, ^Ticket_Owner{participent:address,reward:int257,hasClaimed:bool}> totalPool:int257 participantCount:int257 rewardsPrepared:bool rewardsDistributed:bool minPrize:int257 remainingPool:int257 bonusCount:int257 guaranteedWinPool:int257 decayWinnerSum:int257 remainingDecaySum:int257 startTime:int257 endTime:int257 maxTicket:int257 = LotteryDraw
;;

builder $LotteryDraw$_store(builder build_0, (slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) v) inline {
    var (v'owner, v'bid, v'adminPercentage, v'floorPercentage, v'bonusPercentage, v'decayFactorNumerator, v'decayFactorDenominator, v'fixedPointScale, v'admin, v'tickets, v'participents, v'totalPool, v'participantCount, v'rewardsPrepared, v'rewardsDistributed, v'minPrize, v'remainingPool, v'bonusCount, v'guaranteedWinPool, v'decayWinnerSum, v'remainingDecaySum, v'startTime, v'endTime, v'maxTicket) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_int(v'bid, 257);
    build_0 = build_0.store_int(v'adminPercentage, 257);
    var build_1 = begin_cell();
    build_1 = build_1.store_int(v'floorPercentage, 257);
    build_1 = build_1.store_int(v'bonusPercentage, 257);
    build_1 = build_1.store_int(v'decayFactorNumerator, 257);
    var build_2 = begin_cell();
    build_2 = build_2.store_int(v'decayFactorDenominator, 257);
    build_2 = build_2.store_int(v'fixedPointScale, 257);
    build_2 = __tact_store_address_opt(build_2, v'admin);
    build_2 = build_2.store_dict(v'tickets);
    build_2 = build_2.store_dict(v'participents);
    var build_3 = begin_cell();
    build_3 = build_3.store_int(v'totalPool, 257);
    build_3 = build_3.store_int(v'participantCount, 257);
    build_3 = build_3.store_int(v'rewardsPrepared, 1);
    build_3 = build_3.store_int(v'rewardsDistributed, 1);
    build_3 = build_3.store_int(v'minPrize, 257);
    var build_4 = begin_cell();
    build_4 = build_4.store_int(v'remainingPool, 257);
    build_4 = build_4.store_int(v'bonusCount, 257);
    build_4 = build_4.store_int(v'guaranteedWinPool, 257);
    var build_5 = begin_cell();
    build_5 = build_5.store_int(v'decayWinnerSum, 257);
    build_5 = build_5.store_int(v'remainingDecaySum, 257);
    build_5 = build_5.store_int(v'startTime, 257);
    var build_6 = begin_cell();
    build_6 = build_6.store_int(v'endTime, 257);
    build_6 = build_6.store_int(v'maxTicket, 257);
    build_5 = store_builder_ref(build_5, build_6);
    build_4 = store_builder_ref(build_4, build_5);
    build_3 = store_builder_ref(build_3, build_4);
    build_2 = store_builder_ref(build_2, build_3);
    build_1 = store_builder_ref(build_1, build_2);
    build_0 = store_builder_ref(build_0, build_1);
    return build_0;
}

(slice, ((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int))) $LotteryDraw$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'bid = sc_0~load_int(257);
    var v'adminPercentage = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'floorPercentage = sc_1~load_int(257);
    var v'bonusPercentage = sc_1~load_int(257);
    var v'decayFactorNumerator = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'decayFactorDenominator = sc_2~load_int(257);
    var v'fixedPointScale = sc_2~load_int(257);
    var v'admin = sc_2~__tact_load_address_opt();
    var v'tickets = sc_2~load_dict();
    var v'participents = sc_2~load_dict();
    slice sc_3 = sc_2~load_ref().begin_parse();
    var v'totalPool = sc_3~load_int(257);
    var v'participantCount = sc_3~load_int(257);
    var v'rewardsPrepared = sc_3~load_int(1);
    var v'rewardsDistributed = sc_3~load_int(1);
    var v'minPrize = sc_3~load_int(257);
    slice sc_4 = sc_3~load_ref().begin_parse();
    var v'remainingPool = sc_4~load_int(257);
    var v'bonusCount = sc_4~load_int(257);
    var v'guaranteedWinPool = sc_4~load_int(257);
    slice sc_5 = sc_4~load_ref().begin_parse();
    var v'decayWinnerSum = sc_5~load_int(257);
    var v'remainingDecaySum = sc_5~load_int(257);
    var v'startTime = sc_5~load_int(257);
    slice sc_6 = sc_5~load_ref().begin_parse();
    var v'endTime = sc_6~load_int(257);
    var v'maxTicket = sc_6~load_int(257);
    return (sc_0, (v'owner, v'bid, v'adminPercentage, v'floorPercentage, v'bonusPercentage, v'decayFactorNumerator, v'decayFactorDenominator, v'fixedPointScale, v'admin, v'tickets, v'participents, v'totalPool, v'participantCount, v'rewardsPrepared, v'rewardsDistributed, v'minPrize, v'remainingPool, v'bonusCount, v'guaranteedWinPool, v'decayWinnerSum, v'remainingDecaySum, v'startTime, v'endTime, v'maxTicket));
}

(slice, ((int, int, int, int, int, int, int, int))) $LotteryDraw$init$_load(slice sc_0) inline {
    var v'_adminPct = sc_0~load_int(257);
    var v'_floorPct = sc_0~load_int(257);
    var v'_bonusPct = sc_0~load_int(257);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'_decayNum = sc_1~load_int(257);
    var v'_decayDenom = sc_1~load_int(257);
    var v'_Bid = sc_1~load_int(257);
    slice sc_2 = sc_1~load_ref().begin_parse();
    var v'_HowLong = sc_2~load_int(257);
    var v'_MaxTicket = sc_2~load_int(257);
    return (sc_0, (v'_adminPct, v'_floorPct, v'_bonusPct, v'_decayNum, v'_decayDenom, v'_Bid, v'_HowLong, v'_MaxTicket));
}

(slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $LotteryDraw$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$LotteryDraw$_load();
    }
    else {
        (int $_adminPct, int $_floorPct, int $_bonusPct, int $_decayNum, int $_decayDenom, int $_Bid, int $_HowLong, int $_MaxTicket) = $sc~$LotteryDraw$init$_load();
        $sc.end_parse();
        return $LotteryDraw$_contract_init($_adminPct, $_floorPct, $_bonusPct, $_decayNum, $_decayDenom, $_Bid, $_HowLong, $_MaxTicket);
    }
}

() $LotteryDraw$_contract_store((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_int(true, 1);
    b = $LotteryDraw$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Contract LotteryDraw functions
;;

(slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $LotteryDraw$_contract_init(int $_adminPct, int $_floorPct, int $_bonusPct, int $_decayNum, int $_decayDenom, int $_Bid, int $_HowLong, int $_MaxTicket) impure inline {
    var (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)) = (null(), null(), null(), null(), null(), null(), null(), null(), null(), null(), null(), null(), null(), null(), null(), null(), null(), null(), null(), null(), null(), null(), null(), null());
    $self'owner = __tact_context_get_sender();
    $self'bid = $_Bid;
    $self'adminPercentage = $_adminPct;
    $self'floorPercentage = $_floorPct;
    $self'bonusPercentage = $_bonusPct;
    $self'decayFactorNumerator = $_decayNum;
    $self'decayFactorDenominator = $_decayDenom;
    $self'fixedPointScale = 1000000;
    $self'admin = __tact_context_get_sender();
    $self'totalPool = 0;
    $self'participantCount = 0;
    $self'rewardsPrepared = false;
    $self'minPrize = 0;
    $self'remainingPool = 0;
    $self'decayWinnerSum = 0;
    $self'bonusCount = 0;
    $self'remainingDecaySum = 0;
    $self'guaranteedWinPool = 0;
    $self'rewardsDistributed = false;
    $self'startTime = $global_now();
    $self'endTime = ($global_now() + (($_HowLong * 60) * 60));
    $self'maxTicket = $_MaxTicket;
    return ($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket);
}

((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $LotteryDraw$_fun_random_uint((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, int $max, int $salt) impure inline_ref {
    var (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)) = $self;
    slice $data = $Cell$_fun_asSlice($Builder$_fun_endCell(store_uint(store_uint($global_beginCell(), $global_now(), 64), $salt, 32)));
    int $hashVal = __tact_sha256($data);
    var $fresh$ret_0 = ((($hashVal % $max) + $max) % $max);
    return (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket), $fresh$ret_0);
}

((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $LotteryDraw$_fun_get_decay_weight((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, int $index) impure inline_ref {
    var (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)) = $self;
    int $numPower = $global_pow($self'decayFactorNumerator, $index);
    int $denomPower = $global_pow($self'decayFactorDenominator, $index);
    var $fresh$ret_1 = (($numPower * $self'fixedPointScale) / $denomPower);
    return (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket), $fresh$ret_1);
}

((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $LotteryDraw$_fun_get_participant_count((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)) = $self;
    var $fresh$ret_2 = $self'participantCount;
    return (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket), $fresh$ret_2);
}

((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $LotteryDraw$_fun_get_total_Pool((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)) = $self;
    var $fresh$ret_3 = $self'totalPool;
    return (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket), $fresh$ret_3);
}

((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), tuple) $LotteryDraw$_fun_get_Ticket_Data((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, int $tk) impure inline_ref {
    var (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)) = $self;
    var $fresh$ret_4 = $Ticket_Owner$_load_opt(__tact_dict_get_int_cell($self'participents, 257, $tk));
    return (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket), $fresh$ret_4);
}

((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), cell) $LotteryDraw$_fun_get_Ticket_TotalData((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)) = $self;
    var $fresh$ret_5 = $self'participents;
    return (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket), $fresh$ret_5);
}

((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), cell) $LotteryDraw$_fun_get_Ticket_map((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)) = $self;
    var $fresh$ret_6 = $self'tickets;
    return (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket), $fresh$ret_6);
}

((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $LotteryDraw$_fun_get_BonusCount((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)) = $self;
    var $fresh$ret_7 = $self'bonusCount;
    return (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket), $fresh$ret_7);
}

((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $LotteryDraw$_fun_get_prize((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self, int $index) impure inline_ref {
    var (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)) = $self;
    var $fresh$ret_8 = (($self'guaranteedWinPool * ($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)~$LotteryDraw$_fun_get_decay_weight($index)) / $self'decayWinnerSum);
    return (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket), $fresh$ret_8);
}

((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), int) $LotteryDraw$_fun_get_MinPrize((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)) = $self;
    var $fresh$ret_9 = $self'minPrize;
    return (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket), $fresh$ret_9);
}

((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int), slice) $LotteryDraw$_fun_get_Bid((slice, int, int, int, int, int, int, int, slice, cell, cell, int, int, int, int, int, int, int, int, int, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)) = $self;
    slice $numberString = $Int$_fun_toFloatString($self'bid, 9);
    var $fresh$ret_10 = $numberString;
    return (($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket), $fresh$ret_10);
}

;;
;; Get methods of a Contract LotteryDraw
;;

_ %random_uint(int $max, int $salt) method_id(99179) {
    int $max = $max;
    int $salt = $salt;
    var self = $LotteryDraw$_contract_load();
    var res = self~$LotteryDraw$_fun_random_uint($max, $salt);
    return res;
}

_ %get_decay_weight(int $index) method_id(75340) {
    int $index = $index;
    var self = $LotteryDraw$_contract_load();
    var res = self~$LotteryDraw$_fun_get_decay_weight($index);
    return res;
}

_ %get_participant_count() method_id(76968) {
    var self = $LotteryDraw$_contract_load();
    var res = self~$LotteryDraw$_fun_get_participant_count();
    return res;
}

_ %get_total_Pool() method_id(70671) {
    var self = $LotteryDraw$_contract_load();
    var res = self~$LotteryDraw$_fun_get_total_Pool();
    return res;
}

_ %get_Ticket_Data(int $tk) method_id(101323) {
    int $tk = $tk;
    var self = $LotteryDraw$_contract_load();
    var res = self~$LotteryDraw$_fun_get_Ticket_Data($tk);
    return $Ticket_Owner$_to_opt_external(res);
}

_ %get_Ticket_TotalData() method_id(101536) {
    var self = $LotteryDraw$_contract_load();
    var res = self~$LotteryDraw$_fun_get_Ticket_TotalData();
    return res;
}

_ %get_Ticket_map() method_id(104701) {
    var self = $LotteryDraw$_contract_load();
    var res = self~$LotteryDraw$_fun_get_Ticket_map();
    return res;
}

_ %get_BonusCount() method_id(72709) {
    var self = $LotteryDraw$_contract_load();
    var res = self~$LotteryDraw$_fun_get_BonusCount();
    return res;
}

_ %get_prize(int $index) method_id(69704) {
    int $index = $index;
    var self = $LotteryDraw$_contract_load();
    var res = self~$LotteryDraw$_fun_get_prize($index);
    return res;
}

_ %get_MinPrize() method_id(112976) {
    var self = $LotteryDraw$_contract_load();
    var res = self~$LotteryDraw$_fun_get_MinPrize();
    return res;
}

_ %get_Bid() method_id(93519) {
    var self = $LotteryDraw$_contract_load();
    var res = self~$LotteryDraw$_fun_get_Bid();
    return res;
}

;;
;; Routing of a Contract LotteryDraw
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket) = $LotteryDraw$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) { return (); }
    int op = 0;
    int in_msg_length = slice_bits(in_msg);
    if (in_msg_length >= 32) {
        op = in_msg~load_uint(32);
    }
    ;; Receive Ticket message
    if (op == 2553472917) {
        var $ticket'ticketId = in_msg~load_int(257);
        throw_unless(63603, ($self'participantCount < $self'maxTicket));
        throw_unless(36968, ($self'bid <= $Context$_get_value(__tact_context_get())));
        throw_unless(42805, ( (($self'startTime <= $global_now())) ? (($self'endTime >= $global_now())) : (false) ));
        throw_unless(37181, (~ $self'rewardsPrepared));
        int $ticketId = $ticket'ticketId;
        throw_unless(22830, null?($Ticket_Owner$_load_opt(__tact_dict_get_int_cell($self'participents, 257, $ticketId))));
        $self'participantCount = $self'participantCount + 1;
        $self'tickets~__tact_dict_set_int_int(257, $self'participantCount, $ticket'ticketId, 257);
        $self'participents~__tact_dict_set_int_cell(257, $ticketId, $Ticket_Owner$_store_cell($Ticket_Owner$_constructor_participent_reward_hasClaimed(__tact_context_get_sender(), 0, false), begin_cell()));
        int $extra = ($Context$_get_value(__tact_context_get()) - $self'bid);
        $self'totalPool = $self'totalPool + $self'bid;
        if (($extra > 0)) {
            $global_send($SendParameters$_constructor_to_value_mode(__tact_context_get_sender(), $extra, 2));
        }
        $LotteryDraw$_contract_store(($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket));
        return ();
    }
    
    ;; Receive Tickets message
    if (op == 0xccd5cd9f) {
        var $tickets'ticketIds = in_msg~load_dict();
        var $tickets'ticketcount = in_msg~load_int(257);
        int $ticketCount = $tickets'ticketcount;
        throw_unless(48696, ($ticketCount > 0));
        int $requiredAmount = ($self'bid * $ticketCount);
        int $sendvalue = $Context$_get_value(__tact_context_get());
        throw_unless(42805, ( (($self'startTime <= $global_now())) ? (($self'endTime >= $global_now())) : (false) ));
        throw_unless(63603, (($self'participantCount + $ticketCount) <= $self'maxTicket));
        throw_unless(37181, (~ $self'rewardsPrepared));
        int $i = 0;
        while (($i < $ticketCount)) {
            int $ticketId = __tact_dict_get_int_int($tickets'ticketIds, 257, ($i + 1), 257);
            throw_unless(49271, ($ticketId > 0));
            throw_unless(22830, null?($Ticket_Owner$_load_opt(__tact_dict_get_int_cell($self'participents, 257, $ticketId))));
            $self'participantCount = $self'participantCount + 1;
            $self'tickets~__tact_dict_set_int_int(257, $self'participantCount, $ticketId, 257);
            $self'participents~__tact_dict_set_int_cell(257, $ticketId, $Ticket_Owner$_store_cell($Ticket_Owner$_constructor_participent_reward_hasClaimed(__tact_context_get_sender(), 0, false), begin_cell()));
            $self'totalPool = $self'totalPool + $self'bid;
            $i = $i + 1;
        }
        int $extra = ($Context$_get_value(__tact_context_get()) - ($self'bid * $tickets'ticketcount));
        if (($extra > 0)) {
            $global_send($SendParameters$_constructor_to_value_mode(__tact_context_get_sender(), $extra, 2));
        }
        $LotteryDraw$_contract_store(($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket));
        return ();
    }
    
    ;; Receive Prepare_rewards message
    if (op == 0xa1ed4eaa) {
        var $msg = empty_tuple();
        throw_unless(16461, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        throw_unless(49658, (~ $self'rewardsPrepared));
        throw_unless(39078, ($self'participantCount > 0));
        int $adminCut = (($self'totalPool * $self'adminPercentage) / 100);
        int $prizePool = ($self'totalPool - $adminCut);
        int $totalMinPrize = (($prizePool * $self'floorPercentage) / 100);
        $self'remainingPool = ($prizePool - $totalMinPrize);
        $self'minPrize = ($totalMinPrize / $self'participantCount);
        if (($self'remainingPool < 0)) {
            $self'remainingPool = 0;
        }
        $self'bonusCount = (($self'participantCount * $self'bonusPercentage) / 100);
        $self'guaranteedWinPool = ($self'remainingPool / 2);
        int $decayWinnerSum = 0;
        int $i = 1;
        while (($i <= $self'bonusCount)) {
            $decayWinnerSum = $decayWinnerSum + ($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)~$LotteryDraw$_fun_get_decay_weight($i);
            $i = $i + 1;
        }
        $self'decayWinnerSum = $decayWinnerSum;
        int $remainingDecaySum = 0;
        while (($i <= $self'participantCount)) {
            $remainingDecaySum = $remainingDecaySum + ($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)~$LotteryDraw$_fun_get_decay_weight($i);
            $i = $i + 1;
        }
        $self'remainingDecaySum = $remainingDecaySum;
        $self'rewardsPrepared = true;
        $LotteryDraw$_contract_store(($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket));
        return ();
    }
    
    ;; Receive Distribute_rewards message
    if (op == 0xa1ed4eab) {
        var $msg = empty_tuple();
        throw_unless(16461, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        throw_unless(56656, (~ $self'rewardsDistributed));
        throw_unless(10839, $self'rewardsPrepared);
        int $salt = 1;
        int $i = $self'participantCount;
        while (($i > 0)) {
            int $j = $global_random($salt, ($i + 1));
            int $temp = __tact_dict_get_int_int($self'tickets, 257, $i, 257);
            $self'tickets~__tact_dict_set_int_int(257, $i, __tact_dict_get_int_int($self'tickets, 257, $j, 257), 257);
            $self'tickets~__tact_dict_set_int_int(257, $j, $temp, 257);
            $i = $i - $i;
        }
        int $guaranteedWinPool = $self'guaranteedWinPool;
        int $remainingPool = ($self'remainingPool - $self'guaranteedWinPool);
        int $bonusPrize = 0;
        int $orderIndex = 1;
        int $decayWinnerSum = $self'decayWinnerSum;
        int $remainingDecaySum = $self'remainingDecaySum;
        int $fixedPointScale = $self'fixedPointScale;
        int $minPrize = $self'minPrize;
        while (($orderIndex <= $self'participantCount)) {
            if (($orderIndex <= $self'bonusCount)) {
                int $weight = ($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)~$LotteryDraw$_fun_get_decay_weight(($orderIndex - 1));
                $bonusPrize = (($guaranteedWinPool * $weight) / $decayWinnerSum);
            } else {
                int $weight = ($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)~$LotteryDraw$_fun_get_decay_weight(($orderIndex - 1));
                $bonusPrize = (($remainingPool * $weight) / $remainingDecaySum);
            }
            int $totalReward = ($minPrize + $bonusPrize);
            int $ticketId = __tact_dict_get_int_int($self'tickets, 257, $orderIndex, 257);
            if ((~ null?($ticketId))) {
                var ($ticketowner'participent, $ticketowner'reward, $ticketowner'hasClaimed) = $Ticket_Owner$_not_null($Ticket_Owner$_load_opt(__tact_dict_get_int_cell($self'participents, 257, $ticketId)));
                $ticketowner'reward = $totalReward;
                $self'participents~__tact_dict_set_int_cell(257, $ticketId, $Ticket_Owner$_store_cell(($ticketowner'participent, $ticketowner'reward, $ticketowner'hasClaimed), begin_cell()));
            }
            $orderIndex = $orderIndex + 1;
        }
        $self'rewardsDistributed = true;
        $LotteryDraw$_contract_store(($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket));
        return ();
    }
    
    ;; Receive TicketId message
    if (op == 1442497784) {
        var $tk'ticket = in_msg~load_int(257);
        throw_unless(9971, (~ null?($Ticket_Owner$_load_opt(__tact_dict_get_int_cell($self'participents, 257, $tk'ticket)))));
        throw_unless(10738, $self'rewardsDistributed);
        throw_unless(24322, ($Ticket_Owner$_get_hasClaimed($Ticket_Owner$_not_null($Ticket_Owner$_load_opt(__tact_dict_get_int_cell($self'participents, 257, $tk'ticket)))) == false));
        int $amount = $Ticket_Owner$_get_reward($Ticket_Owner$_not_null($Ticket_Owner$_load_opt(__tact_dict_get_int_cell($self'participents, 257, $tk'ticket))));
        throw_unless(59515, (~ null?($amount)));
        var ($data'participent, $data'reward, $data'hasClaimed) = $Ticket_Owner$_not_null($Ticket_Owner$_load_opt(__tact_dict_get_int_cell($self'participents, 257, $tk'ticket)));
        $data'hasClaimed = true;
        $data'reward = 0;
        $self'participents~__tact_dict_set_int_cell(257, $tk'ticket, $Ticket_Owner$_store_cell(($data'participent, $data'reward, $data'hasClaimed), begin_cell()));
        if ((~ null?($amount))) {
            $global_send($SendParameters$_constructor_to_value_body(__tact_context_get_sender(), $amount, __gen_cell_cell_02e6c12dc9958ed9e4e64890d986b7252c98f6109c4a8a5e96d685882eeb45b1()));
        }
        $LotteryDraw$_contract_store(($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket));
        return ();
    }
    
    ;; Receive IncreaseTime message
    if (op == 3976926516) {
        var $msg'seconds = in_msg~load_int(257);
        throw_unless(15882, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        $self'endTime = $self'endTime + $msg'seconds;
        $LotteryDraw$_contract_store(($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket));
        return ();
    }
    
    ;; Receive DecreaseTime message
    if (op == 3151043122) {
        var $msg'seconds = in_msg~load_int(257);
        throw_unless(26163, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        throw_unless(26571, (($self'endTime - $msg'seconds) >= $self'startTime));
        $self'endTime = $self'endTime - $msg'seconds;
        $LotteryDraw$_contract_store(($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket));
        return ();
    }
    
    ;; Receive Ownership message
    if (op == 0xa1ed4eac) {
        var $newOwner'name = in_msg~load_ref().begin_parse();
        throw_unless(25826, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        $self'owner = __tact_context_get_sender();
        $LotteryDraw$_contract_store(($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket));
        return ();
    }
    
    ;; Receive IncreaseTicket message
    if (op == 3276149870) {
        var $msg'ticket = in_msg~load_int(257);
        throw_unless(6531, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        $self'maxTicket = $self'maxTicket + $msg'ticket;
        $LotteryDraw$_contract_store(($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket));
        return ();
    }
    
    ;; Receive DecreaseTicket message
    if (op == 3840286441) {
        var $msg'ticket = in_msg~load_int(257);
        throw_unless(48981, ( equal_slices_bits(__tact_context_get_sender(), $self'owner) ));
        throw_unless(19684, (($self'maxTicket - $msg'ticket) >= 0));
        $self'maxTicket = $self'maxTicket - $msg'ticket;
        $LotteryDraw$_contract_store(($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket));
        return ();
    }
    
    ;; Receive Deploy message
    if (op == 0x946a98b6) {
        var $deploy'queryId = in_msg~load_uint(64);
        ($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket)~$LotteryDraw$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId), begin_cell()));
        $LotteryDraw$_contract_store(($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket));
        return ();
    }
    
    ;; Receive empty message
    if ((op == 0) & (in_msg_length <= 32)) {
        $LotteryDraw$_contract_store(($self'owner, $self'bid, $self'adminPercentage, $self'floorPercentage, $self'bonusPercentage, $self'decayFactorNumerator, $self'decayFactorDenominator, $self'fixedPointScale, $self'admin, $self'tickets, $self'participents, $self'totalPool, $self'participantCount, $self'rewardsPrepared, $self'rewardsDistributed, $self'minPrize, $self'remainingPool, $self'bonusCount, $self'guaranteedWinPool, $self'decayWinnerSum, $self'remainingDecaySum, $self'startTime, $self'endTime, $self'maxTicket));
        return ();
    }
    ;; Throw if not handled
    throw(130);
}
